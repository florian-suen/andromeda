enum MediaType {
  IMAGE
  VIDEO
}

type Media @model @auth(rules: [{ allow: public }]) {
  id: ID!
  storageKey: String
  type: MediaType
  messageID: ID! @index(name: "byMessage")
  chatgroupID: ID! @index(name: "byChatGroup")
  duration: String
  width: String
  height: String
}

enum AttachmentType {
  IMAGE
  VIDEO
}

enum requestStatusType {
  REQUESTED
  ACCEPTED
  BLOCKED
}

type Attachment @model @auth(rules: [{ allow: public }]) {
  id: ID!
  storageKey: String!
  type: AttachmentType!
  messageID: ID! @index(name: "byMessage")
  chatgroupID: ID! @index(name: "byChatGroup")
  name: String!
}

type ChatGroup @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String
  image: String
  LastMessage: Message @hasOne
  Messages: [Message] @hasMany(indexName: "byChatGroup", fields: ["id"])
  users: [UserChatGroup] @hasMany(indexName: "byChatGroupUser", fields: ["id"])
  leaderID: ID @index(name: "byUserLeader")
  Attachments: [Attachment] @hasMany(indexName: "byChatGroup", fields: ["id"])
  Media: [Media] @hasMany(indexName: "byChatGroup", fields: ["id"])
}

type User @model @auth(rules: [{ allow: public }]) {
  id: ID!
  username: String!
  status: String
  image: String
  inviteId: String!
    @index(
      name: "userByInviteId"
      sortKeyFields: ["id"]
      queryField: "userByInviteId"
    )
  Messages: [Message] @hasMany(indexName: "byUser", fields: ["id"])
  ChatGroups: [UserChatGroup]
    @hasMany(indexName: "byUserChatGroup", fields: ["id"])

  Friends: [UserContact]
    @hasMany(indexName: "byUserContactFriend", fields: ["id"])
  Leader: [ChatGroup] @hasMany(indexName: "byUserLeader", fields: ["id"])
}

type UserContact @model @auth(rules: [{ allow: public }]) {
  id: ID!
  userID: ID!
    @index(
      name: "byUserContactFriend"
      sortKeyFields: ["friendID"]
      queryField: "ListbyUserContactFriend"
    )
  friendID: ID!
  updatedAt: AWSDateTime!
  sender: Boolean!
  requestStatus: requestStatusType!
  user: User @belongsTo(fields: ["userID"])
  friend: User @belongsTo(fields: ["friendID"])
  userContact: UserContact @hasOne
}

type UserChatGroup @model @auth(rules: [{ allow: public }]) {
  id: ID!
  userID: ID!
    @index(
      name: "byUserChatGroup"
      sortKeyFields: ["updatedAt"]
      queryField: "ListbyUserChatGroup"
    )
  chatgroupID: ID!
    @index(
      name: "byChatGroupUser"
      sortKeyFields: ["updatedAt"]
      queryField: "ListbyChatGroupUser"
    )
  updatedAt: AWSDateTime!
  Chatgroup: ChatGroup @belongsTo(fields: ["chatgroupID"])
  user: User @belongsTo(fields: ["userID"])
}

type Message @model @auth(rules: [{ allow: public }]) {
  id: ID!
  createdAt: AWSDateTime
  message: String
  userID: ID! @index(name: "byUser")
  chatgroupID: ID!
    @index(
      name: "byChatGroup"
      sortKeyFields: ["createdAt"]
      queryField: "listMessagesByChatGroup"
    )
  Attachments: [Attachment] @hasMany(indexName: "byMessage", fields: ["id"])
  Media: [Media] @hasMany(indexName: "byMessage", fields: ["id"])
}
 